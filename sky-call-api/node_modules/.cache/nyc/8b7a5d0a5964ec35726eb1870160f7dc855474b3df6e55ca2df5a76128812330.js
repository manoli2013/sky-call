var cov_26sx202ncc=function(){var path="/home/noli/bootcamp/collab/skylab-bootcamp-201909/staff/noli-pascual/sky-call/sky-call-api/logic/register-user/index.spec.js";var hash="6b136717741cd4615daf9e40401d282b86c06be0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/noli/bootcamp/collab/skylab-bootcamp-201909/staff/noli-pascual/sky-call/sky-call-api/logic/register-user/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:21},end:{line:4,column:33}},"4":{start:{line:5,column:19},end:{line:5,column:23}},"5":{start:{line:6,column:37},end:{line:6,column:61}},"6":{start:{line:7,column:46},end:{line:7,column:70}},"7":{start:{line:9,column:0},end:{line:106,column:2}},"8":{start:{line:10,column:4},end:{line:10,column:47}},"9":{start:{line:10,column:17},end:{line:10,column:46}},"10":{start:{line:14,column:4},end:{line:23,column:6}},"11":{start:{line:15,column:8},end:{line:15,column:33}},"12":{start:{line:16,column:8},end:{line:16,column:39}},"13":{start:{line:17,column:8},end:{line:17,column:44}},"14":{start:{line:18,column:8},end:{line:18,column:41}},"15":{start:{line:19,column:8},end:{line:19,column:41}},"16":{start:{line:20,column:8},end:{line:20,column:22}},"17":{start:{line:22,column:8},end:{line:22,column:32}},"18":{start:{line:25,column:4},end:{line:40,column:6}},"19":{start:{line:26,column:25},end:{line:26,column:84}},"20":{start:{line:28,column:8},end:{line:28,column:40}},"21":{start:{line:30,column:21},end:{line:30,column:53}},"22":{start:{line:32,column:8},end:{line:32,column:29}},"23":{start:{line:34,column:8},end:{line:34,column:40}},"24":{start:{line:35,column:8},end:{line:35,column:46}},"25":{start:{line:37,column:8},end:{line:37,column:48}},"26":{start:{line:38,column:8},end:{line:38,column:48}},"27":{start:{line:39,column:8},end:{line:39,column:40}},"28":{start:{line:42,column:4},end:{line:59,column:6}},"29":{start:{line:43,column:8},end:{line:43,column:82}},"30":{start:{line:43,column:25},end:{line:43,column:81}},"31":{start:{line:45,column:8},end:{line:58,column:10}},"32":{start:{line:46,column:12},end:{line:57,column:13}},"33":{start:{line:47,column:16},end:{line:47,column:75}},"34":{start:{line:49,column:16},end:{line:49,column:58}},"35":{start:{line:51,column:16},end:{line:51,column:38}},"36":{start:{line:53,column:16},end:{line:53,column:46}},"37":{start:{line:54,column:16},end:{line:54,column:63}},"38":{start:{line:55,column:16},end:{line:55,column:65}},"39":{start:{line:56,column:16},end:{line:56,column:95}},"40":{start:{line:105,column:4},end:{line:105,column:60}},"41":{start:{line:105,column:16},end:{line:105,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:34},end:{line:9,column:35}},loc:{start:{line:9,column:40},end:{line:106,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:11},end:{line:10,column:12}},loc:{start:{line:10,column:17},end:{line:10,column:46}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:15},end:{line:14,column:16}},loc:{start:{line:14,column:21},end:{line:23,column:5}},line:14},"3":{name:"(anonymous_3)",decl:{start:{line:25,column:48},end:{line:25,column:49}},loc:{start:{line:25,column:60},end:{line:40,column:5}},line:25},"4":{name:"(anonymous_4)",decl:{start:{line:42,column:41},end:{line:42,column:42}},loc:{start:{line:42,column:47},end:{line:59,column:5}},line:42},"5":{name:"(anonymous_5)",decl:{start:{line:43,column:19},end:{line:43,column:20}},loc:{start:{line:43,column:25},end:{line:43,column:81}},line:43},"6":{name:"(anonymous_6)",decl:{start:{line:45,column:51},end:{line:45,column:52}},loc:{start:{line:45,column:63},end:{line:58,column:9}},line:45},"7":{name:"(anonymous_7)",decl:{start:{line:105,column:10},end:{line:105,column:11}},loc:{start:{line:105,column:16},end:{line:105,column:59}},line:105}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"6b136717741cd4615daf9e40401d282b86c06be0"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_26sx202ncc.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_26sx202ncc.s[1]++,process);const{expect}=(cov_26sx202ncc.s[2]++,require('chai'));const registerUser=(cov_26sx202ncc.s[3]++,require('.'));const{random}=(cov_26sx202ncc.s[4]++,Math);const{errors:{ContentError}}=(cov_26sx202ncc.s[5]++,require('sky-call-util'));const{database,models:{User,Agent}}=(cov_26sx202ncc.s[6]++,require('sky-call-data'));cov_26sx202ncc.s[7]++;describe('logic - register user',()=>{cov_26sx202ncc.f[0]++;cov_26sx202ncc.s[8]++;before(()=>{cov_26sx202ncc.f[1]++;cov_26sx202ncc.s[9]++;return database.connect(TEST_DB_URL);});let name,surname,username,password,role;cov_26sx202ncc.s[10]++;beforeEach(()=>{cov_26sx202ncc.f[2]++;cov_26sx202ncc.s[11]++;name=`name-${random()}`;cov_26sx202ncc.s[12]++;surname=`surname-${random()}`;cov_26sx202ncc.s[13]++;email=`email-${random()}@mail.com`;cov_26sx202ncc.s[14]++;username=`username-${random()}`;cov_26sx202ncc.s[15]++;password=`password-${random()}`;cov_26sx202ncc.s[16]++;role='agent';cov_26sx202ncc.s[17]++;return User.deleteMany();});cov_26sx202ncc.s[18]++;it('should succeed on correct credentials',async()=>{cov_26sx202ncc.f[3]++;const response=(cov_26sx202ncc.s[19]++,await registerUser(name,surname,username,password,role));cov_26sx202ncc.s[20]++;expect(response).to.be.undefined;const user=(cov_26sx202ncc.s[21]++,await User.findOne({username}));cov_26sx202ncc.s[22]++;expect(user).to.exist;cov_26sx202ncc.s[23]++;expect(user.name).to.equal(name);cov_26sx202ncc.s[24]++;expect(user.surname).to.equal(surname);cov_26sx202ncc.s[25]++;expect(user.username).to.equal(username);cov_26sx202ncc.s[26]++;expect(user.password).to.equal(password);cov_26sx202ncc.s[27]++;expect(user.role).to.equal(role);});cov_26sx202ncc.s[28]++;describe('when user already exists',()=>{cov_26sx202ncc.f[4]++;cov_26sx202ncc.s[29]++;beforeEach(()=>{cov_26sx202ncc.f[5]++;cov_26sx202ncc.s[30]++;return User.create({name,surname,username,password,role});});cov_26sx202ncc.s[31]++;it('should fail on already existing user',async()=>{cov_26sx202ncc.f[6]++;cov_26sx202ncc.s[32]++;try{cov_26sx202ncc.s[33]++;await registerUser(name,surname,username,password,role);cov_26sx202ncc.s[34]++;throw Error('should not reach this point');}catch(error){cov_26sx202ncc.s[35]++;expect(error).to.exist;cov_26sx202ncc.s[36]++;expect(error.message).to.exist;cov_26sx202ncc.s[37]++;expect(typeof error.message).to.equal('string');cov_26sx202ncc.s[38]++;expect(error.message.length).to.be.greaterThan(0);cov_26sx202ncc.s[39]++;expect(error.message).to.equal(`user with username ${username} already exists`);}});});// it('should fail on incorrect name, surname, email, password, or expression type and content', () => {
//     expect(() => registerUser(1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser([])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser({})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(null)).to.throw(TypeError, 'null is not a string')
//     expect(() => registerUser('')).to.throw(ContentError, 'name is empty or blank')
//     expect(() => registerUser(' \t\r')).to.throw(ContentError, 'name is empty or blank')
//     expect(() => registerUser(name, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(name, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, null)).to.throw(TypeError, 'null is not a string')
//     expect(() => registerUser(name, '')).to.throw(ContentError, 'surname is empty or blank')
//     expect(() => registerUser(name, ' \t\r')).to.throw(ContentError, 'surname is empty or blank')
//     expect(() => registerUser(name, surname, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(name, surname, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, surname, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, surname, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, surname, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, surname, null)).to.throw(TypeError, 'null is not a string')
//     // expect(() => registerUser(name, surname, 1)).to.throw(TypeError, '1 is not a string')
//     // expect(() => registerUser(name, surname, email, true)).to.throw(TypeError, 'true is not a string')
//     // expect(() => registerUser(name, surname, email, [])).to.throw(TypeError, ' is not a string')
//     // expect(() => registerUser(name, surname, email, {})).to.throw(TypeError, '[object Object] is not a string')
//     // expect(() => registerUser(name, surname, email, undefined)).to.throw(TypeError, 'undefined is not a string')
//     // expect(() => registerUser(name, surname, email, null)).to.throw(TypeError, 'null is not a string')
//     expect(() => registerUser(name, surname, email, '')).to.throw(ContentError, 'username is empty or blank')
//     expect(() => registerUser(name, surname, email, ' \t\r')).to.throw(ContentError, 'username is empty or blank')
//     expect(() => registerUser(name, surname, email, username, '')).to.throw(ContentError, 'password is empty or blank')
//     expect(() => registerUser(name, surname, email, username, ' \t\r')).to.throw(ContentError, 'password is empty or blank')
// })
// TODO other cases
cov_26sx202ncc.s[40]++;after(()=>{cov_26sx202ncc.f[7]++;cov_26sx202ncc.s[41]++;return User.deleteMany().then(database.disconnect);});});