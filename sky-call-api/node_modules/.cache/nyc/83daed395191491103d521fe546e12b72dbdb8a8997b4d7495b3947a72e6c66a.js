var cov_h9keci4b3=function(){var path="/home/noli/bootcamp/collab/skylab-bootcamp-201909/staff/noli-pascual/sky-call/sky-call-api/logic/authenticate-user/index.spec.js";var hash="9e73daf67e446d3ec0b9208d1258f6ea9c523d08";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/noli/bootcamp/collab/skylab-bootcamp-201909/staff/noli-pascual/sky-call/sky-call-api/logic/authenticate-user/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:25},end:{line:4,column:37}},"4":{start:{line:5,column:19},end:{line:5,column:23}},"5":{start:{line:6,column:55},end:{line:6,column:79}},"6":{start:{line:7,column:39},end:{line:7,column:63}},"7":{start:{line:9,column:0},end:{line:97,column:2}},"8":{start:{line:10,column:4},end:{line:10,column:47}},"9":{start:{line:10,column:17},end:{line:10,column:46}},"10":{start:{line:14,column:4},end:{line:26,column:6}},"11":{start:{line:15,column:8},end:{line:15,column:33}},"12":{start:{line:16,column:8},end:{line:16,column:39}},"13":{start:{line:17,column:8},end:{line:17,column:41}},"14":{start:{line:18,column:8},end:{line:18,column:41}},"15":{start:{line:19,column:8},end:{line:19,column:22}},"16":{start:{line:21,column:8},end:{line:21,column:31}},"17":{start:{line:23,column:21},end:{line:23,column:82}},"18":{start:{line:25,column:8},end:{line:25,column:20}},"19":{start:{line:28,column:4},end:{line:36,column:6}},"20":{start:{line:29,column:23},end:{line:29,column:65}},"21":{start:{line:31,column:8},end:{line:31,column:31}},"22":{start:{line:32,column:8},end:{line:32,column:48}},"23":{start:{line:33,column:8},end:{line:33,column:50}},"24":{start:{line:35,column:8},end:{line:35,column:35}},"25":{start:{line:38,column:4},end:{line:70,column:6}},"26":{start:{line:39,column:8},end:{line:53,column:10}},"27":{start:{line:40,column:29},end:{line:40,column:36}},"28":{start:{line:42,column:12},end:{line:52,column:13}},"29":{start:{line:43,column:16},end:{line:43,column:58}},"30":{start:{line:45,column:16},end:{line:45,column:62}},"31":{start:{line:47,column:16},end:{line:47,column:38}},"32":{start:{line:48,column:16},end:{line:48,column:67}},"33":{start:{line:50,column:36},end:{line:50,column:41}},"34":{start:{line:51,column:16},end:{line:51,column:61}},"35":{start:{line:55,column:8},end:{line:69,column:10}},"36":{start:{line:56,column:29},end:{line:56,column:36}},"37":{start:{line:58,column:12},end:{line:68,column:13}},"38":{start:{line:59,column:16},end:{line:59,column:58}},"39":{start:{line:61,column:16},end:{line:61,column:62}},"40":{start:{line:63,column:16},end:{line:63,column:38}},"41":{start:{line:64,column:16},end:{line:64,column:67}},"42":{start:{line:66,column:36},end:{line:66,column:41}},"43":{start:{line:67,column:16},end:{line:67,column:61}},"44":{start:{line:96,column:4},end:{line:96,column:60}},"45":{start:{line:96,column:16},end:{line:96,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:38},end:{line:9,column:39}},loc:{start:{line:9,column:44},end:{line:97,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:11},end:{line:10,column:12}},loc:{start:{line:10,column:17},end:{line:10,column:46}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:15},end:{line:14,column:16}},loc:{start:{line:14,column:27},end:{line:26,column:5}},line:14},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:48},end:{line:28,column:49}},loc:{start:{line:28,column:60},end:{line:36,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:38,column:39},end:{line:38,column:40}},loc:{start:{line:38,column:45},end:{line:70,column:5}},line:38},"5":{name:"(anonymous_5)",decl:{start:{line:39,column:44},end:{line:39,column:45}},loc:{start:{line:39,column:56},end:{line:53,column:9}},line:39},"6":{name:"(anonymous_6)",decl:{start:{line:55,column:44},end:{line:55,column:45}},loc:{start:{line:55,column:56},end:{line:69,column:9}},line:55},"7":{name:"(anonymous_7)",decl:{start:{line:96,column:10},end:{line:96,column:11}},loc:{start:{line:96,column:16},end:{line:96,column:59}},line:96}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"9e73daf67e446d3ec0b9208d1258f6ea9c523d08"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_h9keci4b3.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_h9keci4b3.s[1]++,process);const{expect}=(cov_h9keci4b3.s[2]++,require('chai'));const authenticateUser=(cov_h9keci4b3.s[3]++,require('.'));const{random}=(cov_h9keci4b3.s[4]++,Math);const{errors:{ContentError,CredentialsError}}=(cov_h9keci4b3.s[5]++,require('sky-call-util'));const{database,models:{User}}=(cov_h9keci4b3.s[6]++,require('sky-call-data'));cov_h9keci4b3.s[7]++;describe('logic - authenticate user',()=>{cov_h9keci4b3.f[0]++;cov_h9keci4b3.s[8]++;before(()=>{cov_h9keci4b3.f[1]++;cov_h9keci4b3.s[9]++;return database.connect(TEST_DB_URL);});let id,name,surname,username,password,role;cov_h9keci4b3.s[10]++;beforeEach(async()=>{cov_h9keci4b3.f[2]++;cov_h9keci4b3.s[11]++;name=`name-${random()}`;cov_h9keci4b3.s[12]++;surname=`surname-${random()}`;cov_h9keci4b3.s[13]++;username=`username-${random()}`;cov_h9keci4b3.s[14]++;password=`password-${random()}`;cov_h9keci4b3.s[15]++;role='agent';cov_h9keci4b3.s[16]++;await User.deleteMany();const user=(cov_h9keci4b3.s[17]++,await User.create({name,surname,username,password,role}));cov_h9keci4b3.s[18]++;id=user.id;});cov_h9keci4b3.s[19]++;it('should succeed on correct credentials',async()=>{cov_h9keci4b3.f[3]++;const userId=(cov_h9keci4b3.s[20]++,await authenticateUser(username,password));cov_h9keci4b3.s[21]++;expect(userId).to.exist;cov_h9keci4b3.s[22]++;expect(typeof userId).to.equal('string');cov_h9keci4b3.s[23]++;expect(userId.length).to.be.greaterThan(0);cov_h9keci4b3.s[24]++;expect(userId).to.equal(id);});cov_h9keci4b3.s[25]++;describe('when wrong credentials',()=>{cov_h9keci4b3.f[4]++;cov_h9keci4b3.s[26]++;it('should fail on wrong username',async()=>{cov_h9keci4b3.f[5]++;const username=(cov_h9keci4b3.s[27]++,'wrong');cov_h9keci4b3.s[28]++;try{cov_h9keci4b3.s[29]++;await authenticateUser(username,password);cov_h9keci4b3.s[30]++;throw new Error('should not reach this point');}catch(error){cov_h9keci4b3.s[31]++;expect(error).to.exist;cov_h9keci4b3.s[32]++;expect(error).to.be.an.instanceOf(CredentialsError);const{message}=(cov_h9keci4b3.s[33]++,error);cov_h9keci4b3.s[34]++;expect(message).to.equal(`wrong credentials`);}});cov_h9keci4b3.s[35]++;it('should fail on wrong password',async()=>{cov_h9keci4b3.f[6]++;const password=(cov_h9keci4b3.s[36]++,'wrong');cov_h9keci4b3.s[37]++;try{cov_h9keci4b3.s[38]++;await authenticateUser(username,password);cov_h9keci4b3.s[39]++;throw new Error('should not reach this point');}catch(error){cov_h9keci4b3.s[40]++;expect(error).to.exist;cov_h9keci4b3.s[41]++;expect(error).to.be.an.instanceOf(CredentialsError);const{message}=(cov_h9keci4b3.s[42]++,error);cov_h9keci4b3.s[43]++;expect(message).to.equal(`wrong credentials`);}});});// it('should fail on incorrect name, surname, email, password, or expression type and content', () => {
//     expect(() => authenticateUser(1)).to.throw(TypeError, '1 is not a string')
//     expect(() => authenticateUser(true)).to.throw(TypeError, 'true is not a string')
//     expect(() => authenticateUser([])).to.throw(TypeError, ' is not a string')
//     expect(() => authenticateUser({})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => authenticateUser(undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => authenticateUser(null)).to.throw(TypeError, 'null is not a string')
//     expect(() => authenticateUser('')).to.throw(ContentError, 'username is empty or blank')
//     expect(() => authenticateUser(' \t\r')).to.throw(ContentError, 'username is empty or blank')
//     expect(() => authenticateUser(email, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => authenticateUser(email, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => authenticateUser(email, [])).to.throw(TypeError, ' is not a string')
//     expect(() => authenticateUser(email, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => authenticateUser(email, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => authenticateUser(email, null)).to.throw(TypeError, 'null is not a string')
//     expect(() => authenticateUser(email, '')).to.throw(ContentError, 'password is empty or blank')
//     expect(() => authenticateUser(email, ' \t\r')).to.throw(ContentError, 'password is empty or blank')
// })
// TODO other cases
cov_h9keci4b3.s[44]++;after(()=>{cov_h9keci4b3.f[7]++;cov_h9keci4b3.s[45]++;return User.deleteMany().then(database.disconnect);});});